#+DATE: [2014-11-09 Sun 20:37]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: EDITOR, EMACS
#+TAGS: EMACS, CUT, COPY, PASTE, ORG2BLOG, 30dayschallenge, day9, DAY 9, challenege, 30 days
#+DESCRIPTION:
#+TITLE: Day 9: cut, copy and paste in Emacs.

As in my last post and coming posts I would be using org2blog to write content further to my blog sites and would further be writing about how to use customize it, in my later posts. This is a cool tool to use when you are writing and posting.

In my earlier days of using computers, copy and pasting something was such an interesting thing to do and the most innovative thing possibly could happen to computers. we just copy things around and move on. I started using emacs some couple of years back, and using it fully only some months back. So many things I learnt and learning. Believe me today, I am amused to know the possiblities cut and paste does have. 

In Emacs, killing means erasing the text and copying it into the "kill ring". "Yanking" means bringing it back. The generalized terms for these are cutting and paste, copy and paste. Killing and yanking a text are the most common ways to move or copy text within emacs.

** Commands that remove text.
Most commands which erases text from the buffer saves it in the kill ring. These are known as "kill" commands. We usually on other editors or place also call it is cut. But Emacs, unlike other editors, stores several recents cuts and not just the last one, which makes killing a safe process, now I don't have to worry about loosing my text. Never felt this confident earlier while killing something. :) The kill ring is shared by all buffers , so the text that's killed is shared among all the buffers. 'C - /' (undo) to undo a kill comannd and bring the killed text back into the buffer, but will keep the killed buffer in the kill ring and this can also be used elsewhere.

On graphical displays, killing some text back copies it to the system clipboard as well and then there are commands which kills the text but do not save it into the kill-ring are called as the delete command. 'C-d' (delete-char) and 'DEL' (delete-backward-character) will delete only one character at time, and those character which deletes only spaces or newlines, killing erase signigicant amount of nontrivial data and do a kill operation as mentioned above.

- Deletion : This will erase the text and not saving in the kill ringh. In emacs, usually those command used for deletion, just delete a character at a time or whitspaces. Some of the delete commands to avoid future confusion.

| Kebindings | Commands                | Description                                                                                  |
|------------+-------------------------+----------------------------------------------------------------------------------------------|
| DEL or     |                         |                                                                                              |
| Backspace  | delete-backward-char    | Delete the previous character or text in the region                                          |
| Delete     | delete-foward-char      | Delete the next character or the next in the region if it's active.                          |
| C-d        | delete-char             | Delete the next character.                                                                   |
| M-\        | delete-horizontal-space | Delete spaces and tabs around point.                                                         |
| M-SPC      | just-one-space          | Delete space and tabs around point leaving just one space.                                   |
| C-x C-o    | delete-blank-lines      | Delete blank lines aroung the current line.                                                  |
| M-^        | delete-indentation      | Join two lines by deleting the intervening newline, along with and indentation following it. |

- Killing or cutting

The simplest way to kill something is using the kill-command i.e. C-k (kill-line), this will invaribaly will remove anything from the point to the end of the line, the point is place where my cursor is, and everything from the cursor to the end of the line would be removed. If the cursor is at the end of the line, it kills the line ending the newline character, merging the next line into the current one; if point is at the beginning of the line, this leave the line blank.  Spaces and tabs are usually ignored while deciding the case to apply. As long as point is after the last visible character in the line, you can be sure that 'C-k' will kill the newline; hence to kill an entire non-blank line, go to the beginning of the line and type 'C-k' twice. This can also be done by giving the positive arguments to 'C-k', and with negative arguments it kill the previous lines before the point. 'C-k' cannot be used to kill a character instead use the deletion commands above. Another way to kill the line and its new line is C-S-backspace, it kills regardless of the position where it is.

Killing a line acts as cutting line, and saving it into the kill-ring. Remember, killing a line can be recovered from the kill-ring, but not deleting the characters.

| Keybindings   | Commands               | Description                               |
|---------------+------------------------+-------------------------------------------|
| C-k           | kill-line              | Kill the rest of the line from the point. |
| C-S-backspace | kill-whole-line        | Kill an entire line at once.              |
| C-w           | kill-region            | Kill the region as the name suggets.      |
| M-w           | kill-ring-save         | Copy the region into the kill ring.       |
| M-d           | kill-word              | kill the next word.                       |
| M-DEL         | backward-kill-word     | Kill one word backwards                   |
| C-x DEL       | backward-kill-sentence | Kill back to the beginning of sentence.   |
| M-k           | kill-sentence          | Kill to the end of sentence.              |
| C-M-k         | kill-sexp              | Kill the following balanced sexp.         |
| M-z CHAR      | zap-to-char            | Kill through the next occurence of CHAR.  |

M-w and C-w are commonly used commands, which kils text in the region and save it in kill-ring. M-w is the emacs copy command. The command M-z combines killing with searching, it read a character and kill from point up to the next occurence of that character in the buffer. A numeric argument would act as a repeat count; a negative argument meant search the text backward and kill text before point.

The are certain buffers which contain 'read-only text' which cannot be modified and therefore cannot be killed, but the kill command still works. they move over text and save it into the kill-ring, without actually deleting the buffer. Normall, they will beep and display error message if this will happen. There may be times when we copy the similar text again, but if we change the varibale 'kill-do-not-save-duplicates' to a non-nil value, identical subsequent killls would yeild a single kill-ring entry, without duplication.


** Yanking or pasting.
It simply means pasting, and for theory, "Yanking means reinserting text previously killed." 

The basic yanking command is 'C-y' (yank). It inserts the most recent kill, leaving the cursor at the end of the inserted text. It also sets the mark at the beginning of the inserted text, without activating it; this lets jumping to the posisition eaisly with 'C-u C-SPC'. With 'C-u C-y' it does exact opposite which means leaving the cursor in the front of the inserted text and sets the mark at the end. ON graphical display the yank command checks the clipboard if any other application has placed any text and is more recently than the last emacs kill.

- The kill ring.
The kill ring is a list of blocks of text that were previously killed. There is only one kill ring shared by all buffers, so we can kill(cut) text from one buffer and yank(paste) it in another buffer. The maximum no. of buffer stored in kill ring is controlled by the variable 'kill-ring-max'. The default is 60. Emacs cycles the kill ring by removing the older entries if we reach the limit. The actual contents of the kill ring are stored in buffer 'kill-ring' and can be viewed using 'C-h v kill-ring'

- Yank(paste)ing earlier kills.
Numeric arguments can be used to yank a text that is no longer the most recent. If you remeber the kill entry you can eaisly yank it back. If you don't remember you can use 'M-y' (yank-pop) command to cycle through the possiblities. If the previous command was yank command, 'M-y' takes the text that was yanked and replaces it with the txt of the next-to-the-last kill, first use C-y to yank the last kill and then use M-y to replace it with the previous kill.

- Appending kills
If two or more kill commands are run in a row, combines their text into a single entry n the kill ring, so a single 'C-y' yanks all the text as a unit. Basically the commands that kill forward from point add onto the end of the previous killed text. Any sequence of mixed forward and backward kill commands puts all the killed text into one entry without rearrangement and Numeric arguments do not break the sequence of appending kills.

| Keybindings | Commands         | Description                                                       |
|-------------+------------------+-------------------------------------------------------------------|
| C-y         | yank             | yank(paste) the last kill in the buffer                           |
| M-y         | yank-pop         | replace the text just yanked with an earlier batch of killed text |
| C-M-w       | append-next-kill | Cause the following command if it is a kill command to append to previous kill  |

** Cut and paste in X.
I have covered enough about copying, cutting and  pasting of the text, these all work expeceted in the terminal window, certain further operations are added while we are working with emacs GUI, they mainly involve usage of the OS clipboard along with the kill-ring. On a graphical display it eases us in transferring the data among other applications using clipboard. On X. two other similar facilities are available, known as primary selection and secondary selection, emacs running on the graphical system integrate with these facilities. Emacs by default uses UTF-8 encoding for interprogram text transfers. If you are not happy with the text you pasted(well, I meant the encoding here.) another coding system can be specified 'C-x RET x' or 'C-x RET X'. Let me briefly go through the available facilities.

- Clipboard
Its a facility that most graphical applications use for "cutting and pasting", when it exists emacs is going to use it for its kill and yank commands. When some text is killed or copied to kill-ring, the text is also placed in the clipboard. Usually, emacs wipes the clipboard clean before putting its contents in there, though this behavior can be modified by setting variable 'save-interprogram-paste-before-kill' to t. This will allow emacs to first save the contents of the clipboard to its kill-ring before deleting it from the clipboard, preventing you from loosing critical data. Yank commands too uses the clipboard, so if someother program is using the clipboard.
